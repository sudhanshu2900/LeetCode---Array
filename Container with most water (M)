PROBLEM LINK: https://leetcode.com/problems/container-with-most-water/



SOLUTION:


int maxArea(vector<int>& height) {
        int area = 0, currArea = 0;
    
        int low = 0, high = height.size()-1;
        
        while(low < high){
            currArea = min(height[low], height[high]) * (high - low);
            area = max(area, currArea);
            
            if(height[low] < height[high]) low++;
            else high--;
        }
        
        return area;
    }
    
    
   Time complexity: O(N),   Space: O(1)
   
    _____________________________________________________________________
    
    
int maxArea(vector<int>& height) {
        int area = 0, currArea = 0;
    
        for(int i = 0; i < height.size(); i++){
            for(int j = i+1; j < height.size(); j++){
                
                currArea = min(height[i], height[j]) * (j-i);
                area = max(area, currArea);
            }
        }
                
        return area;
    }
    
    
 Time Complexity: O(N2),      space: O(1)                BUT IT GIVES TLE.
 
 
 
 
 
 
 
    
    
